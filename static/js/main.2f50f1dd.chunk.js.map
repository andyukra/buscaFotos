{"version":3,"sources":["components/Header.js","components/Buscador.js","components/Imagen.js","components/Pages.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Buscador","searchQuery","React","createRef","enviarDataPadre","e","preventDefault","Squery","current","value","props","getSearchQuery","Fragment","onSubmit","this","ref","type","placeholder","Component","Imagen","items","dataImgs","map","dataImg","key","id","src","previewURL","alt","tags","views","likes","largeImageURL","target","rel","Pages","anterior","page","pagActual","dataPgs","siguiente","onClick","App","state","imagenes","scroll","document","querySelector","scrollIntoView","consultarApi","setState","URL","fetch","then","response","json","resultado","hits","paginacion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f50f1dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n\r\n    return(\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n            <a href=\"index.html\" className=\"navbar-brand\">Buscador de imágenes</a>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Buscador extends React.Component {\r\n\r\n    searchQuery = React.createRef();\r\n\r\n    enviarDataPadre = (e) => {\r\n\r\n        e.preventDefault();\r\n        \r\n        let Squery = this.searchQuery.current.value;\r\n\r\n        this.props.getSearchQuery(Squery);\r\n\r\n        this.searchQuery.current.value = '';\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <form className=\"form-inline my-3 row\" onSubmit={this.enviarDataPadre}>\r\n                    <input ref={this.searchQuery} type=\"text\" className=\"form-control col-12 col-sm-7 offset-sm-1\" placeholder=\"Busca una imágen...\"/>\r\n                    <input type=\"submit\" value=\"Buscar\" className=\"btn btn-info col-12 col-sm-3\"/>\r\n                </form>\r\n            </React.Fragment>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Buscador;","import React from 'react';\r\n\r\nfunction Imagen(props) {\r\n\r\n    const items = props.dataImgs.map(dataImg => {\r\n\r\n        return (\r\n                <div className=\"card col-12 col-sm-6 col-md-3 px-0 m-md-3\" key={dataImg.id}>\r\n                    <img src={dataImg.previewURL} alt={dataImg.tags} className=\"card-img-top\"/>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\">Vistas : {dataImg.views}</p>\r\n                        <p className=\"card-text\">Likes : {dataImg.likes}</p>\r\n                    </div>\r\n                        <a href={dataImg.largeImageURL} className=\"btn btn-success\" target=\"_blank\" rel=\"noopener noreferrer\">Abrir Foto</a>\r\n                </div>\r\n        );\r\n\r\n    });\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {items}\r\n        </React.Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default Imagen;","import React from 'react';\r\n\r\nclass Pages extends React.Component {\r\n\r\n    anterior = () => {\r\n\r\n        let page = this.props.pagActual;\r\n\r\n        if(page <= 1) return null;\r\n\r\n        page -= 1;\r\n\r\n        this.props.dataPgs(page);\r\n\r\n    }\r\n\r\n    siguiente = () => {\r\n\r\n        let page = this.props.pagActual;\r\n\r\n        page += 1;\r\n\r\n        this.props.dataPgs(page);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <button className=\"btn btn-warning btn-lg mr-2\" onClick={this.anterior}>Anterior</button>\r\n                <button className=\"btn btn-success btn-lg ml-2\" onClick={this.siguiente}>Siguiente</button>\r\n            </React.Fragment>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Pages;","import React from 'react';\nimport Header from './components/Header';\nimport Buscador from './components/Buscador';\nimport Imagen from './components/Imagen';\nimport Pages from './components/Pages';\n\nclass App extends React.Component {\n\n  state = {\n\n    searchQuery : '',\n    page : 1,\n    imagenes : []\n\n  }\n\n  scroll = () => {\n\n    const elemento = document.querySelector('.container');\n    elemento.scrollIntoView('smooth', 'start');\n\n  }\n\n  consultarApi = (searchQuery) => {\n\n    this.setState({\n      searchQuery\n    }, () => {\n      let URL = `https://pixabay.com/api/?key=16921993-7964fb14dbb802800b326edfb&q=${this.state.searchQuery}&per_page=30&page=${this.state.page}`;\n      fetch(URL)\n        .then(response => response.json())\n        .then(resultado => {\n          this.setState({\n            imagenes : resultado.hits\n          });\n        });\n    });\n\n  }\n\n  paginacion = (page) => {\n\n    this.setState({\n      page\n    }, () => {\n      let URL = `https://pixabay.com/api/?key=16921993-7964fb14dbb802800b326edfb&q=${this.state.searchQuery}&per_page=30&page=${this.state.page}`;\n      fetch(URL)\n        .then(response => response.json())\n        .then(resultado => {\n          this.setState({\n            imagenes : resultado.hits\n          });\n        });\n      \n      this.scroll();\n\n    });\n\n  }\n\n  render() {\n\n    return(\n      <div className=\"container\">\n        <Header />\n        <Buscador getSearchQuery={this.consultarApi} />\n        <div className=\"row justify-content-center\">\n          <Imagen  dataImgs={this.state.imagenes}/>\n        </div>\n        <div className=\"row justify-content-center my-5\">\n          <Pages dataPgs={this.paginacion} pagActual={this.state.page}/>\n        </div>\n      </div>\n    )\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}